# app/docker-compose.yml

services:
  # FastAPI Web Service (commented out for now, use it when integrating FastAPI in Docker)
  # app:
  #   build:
  #     context: ..
  #     dockerfile: ./app/Dockerfile
  #   container_name: fastapi_web
  #   restart: always
  #   command: uvicorn main:app --host ${FASTAPI_HOST} --port ${FASTAPI_PORT}
  #   environment:
  #     - PYTHONPATH=/app
  #     - POSTGRES_HOST=db  # Switch between 'db' (Docker) or 'localhost' (outside Docker)
  #     - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
  #     - DATABASE_URL=${DATABASE_URL}
  #     - DEBUG=${DEBUG}
  #   volumes:
  #     - ../app:/app
  #     - ../alembic.ini:/app/alembic.ini
  #     - ../alembic:/app/alembic
  #   ports:
  #     - "${FASTAPI_PORT}:${FASTAPI_PORT}"
  #   env_file:
  #     - ../app/.env
  #   networks:
  #     - shared_network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: kafka_broker
    environment:
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_MAX_REQUEST_SIZE: ${KAFKA_MAX_REQUEST_SIZE}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - shared_network

  zookeeper:
    image: zookeeper:3.9.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      JUTE_MAXBUFFER: ${ZOOKEEPER_JUTE_MAXBUFFER}
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    networks:
      - shared_network

  airflow:
    image: apache/airflow:2.5.0
    container_name: airflow_scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${DATABASE_URL}
    volumes:
      - ./dags:/opt/airflow/dags
    ports:
      - "8484:8484"
    networks:
      - shared_network
    depends_on:
      - kafka


  prometheus:
    image: prom/prometheus
    container_name: prometheus_api
    volumes:
      - ../prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - shared_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - shared_network
    depends_on:
      - prometheus

volumes:
  app-data:
    driver: local  # Stockage pour les textes extraits des vid√©os
  grafana-storage:
    driver: local

networks:
  shared_network:
    external: true
